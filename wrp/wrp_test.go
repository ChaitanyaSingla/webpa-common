/*
 *	Copyright (c) 2015 Comcast
 */
package main

import (
	"fmt"
	"reflect"
	"testing"
)

func TestDecode(t *testing.T) {
	in := []byte{0x85, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
		0x70, 0x65, 0x03, 0xb0, 0x74, 0x72, 0x61, 0x6e,
		0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
		0x69, 0x64, 0xd9, 0x24, 0x39, 0x34, 0x34, 0x37,
		0x32, 0x34, 0x31, 0x63, 0x2d, 0x35, 0x32, 0x33,
		0x38, 0x2d, 0x34, 0x63, 0x62, 0x39, 0x2d, 0x39,
		0x62, 0x61, 0x61, 0x2d, 0x37, 0x30, 0x37, 0x36,
		0x65, 0x33, 0x32, 0x33, 0x32, 0x38, 0x39, 0x39,
		0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd9,
		0x26, 0x64, 0x6e, 0x73, 0x3a, 0x77, 0x65, 0x62,
		0x70, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x63, 0x61,
		0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
		0x32, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
		0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa4,
		0x64, 0x65, 0x73, 0x74, 0xb2, 0x73, 0x65, 0x72,
		0x69, 0x61, 0x6c, 0x3a, 0x31, 0x32, 0x33, 0x34,
		0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa7,
		0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xc4,
		0x45, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65,
		0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x22, 0x44,
		0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x58, 0x5f,
		0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x43, 0x4f,
		0x4d, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
		0x74, 0x79, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
		0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65,
		0x77, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
		0x6c, 0x22, 0x20, 0x5d, 0x20, 0x7d}

	expected := SimpleReqResponseMsg{Source: "dns:webpa.comcast.com/v2-device-config",
		Dest:            "serial:1234/config",
		TransactionUUID: "9447241c-5238-4cb9-9baa-7076e3232899",
		Payload:         []byte("{ \"names\": [ \"Device.X_CISCO_COM_Security.Firewall.FirewallLevel\" ] }")}

	v, err := WrpDecode(in)
	if nil != err {
		t.Error("error not nil.")
	}

	got := v.(SimpleReqResponseMsg)
	if false == reflect.DeepEqual(got, expected) {
		t.Error(fmt.Sprintf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			expected, got))
	}
}

func TestSimpleEvent(t *testing.T) {
	start := SimpleEventMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:    "mac:112233445566",
		Payload: []byte("{ \"whatever i want")}

	encoded, e1 := start.WrpEncode()
	if nil != e1 {
		t.Error(fmt.Sprintf("e1 is not nil! %v\n", e1))
	}

	got, e2 := WrpDecode(encoded)
	if nil != e2 {
		t.Error(fmt.Sprintf("e2 is not nil! %v\n", e2))
	}

	if false == reflect.DeepEqual(got, start) {
		t.Error(fmt.Sprintf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			start, got))
	}

	start.String()
}

func TestSimpleReqResponse(t *testing.T) {
	start := SimpleReqResponseMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:            "mac:112233445566",
		TransactionUUID: "23o234u234ioasdflk",
		Payload:         []byte("{ \"whatever i want!\" }")}

	encoded, e1 := start.WrpEncode()
	if nil != e1 {
		t.Error(fmt.Sprintf("e1 is not nil! %v\n", e1))
	}

	got, e2 := WrpDecode(encoded)
	if nil != e2 {
		t.Error(fmt.Sprintf("e2 is not nil! %v\n", e2))
	}

	if false == reflect.DeepEqual(got, start) {
		t.Error(fmt.Sprintf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			start, got))
	}

	start.String()
}

func TestAuthStatus(t *testing.T) {
	start := AuthStatusMsg{Status: 123}

	encoded, e1 := start.WrpEncode()
	if nil != e1 {
		t.Error(fmt.Sprintf("e1 is not nil! %v\n", e1))
	}

	got, e2 := WrpDecode(encoded)
	if nil != e2 {
		t.Error(fmt.Sprintf("e2 is not nil! %v\n", e2))
	}

	if false == reflect.DeepEqual(got, start) {
		t.Error(fmt.Sprintf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			start, got))
	}

	start.String()
}

func TestInvalidMsgType(t *testing.T) {
	in := []byte{0x85, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
		0x70, 0x65, 0x09, 0xb0, 0x74, 0x72, 0x61, 0x6e,
		0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
		0x69, 0x64, 0xd9, 0x24, 0x39, 0x34, 0x34, 0x37,
		0x32, 0x34, 0x31, 0x63, 0x2d, 0x35, 0x32, 0x33,
		0x38, 0x2d, 0x34, 0x63, 0x62, 0x39, 0x2d, 0x39,
		0x62, 0x61, 0x61, 0x2d, 0x37, 0x30, 0x37, 0x36,
		0x65, 0x33, 0x32, 0x33, 0x32, 0x38, 0x39, 0x39,
		0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd9,
		0x26, 0x64, 0x6e, 0x73, 0x3a, 0x77, 0x65, 0x62,
		0x70, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x63, 0x61,
		0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
		0x32, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
		0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa4,
		0x64, 0x65, 0x73, 0x74, 0xb2, 0x73, 0x65, 0x72,
		0x69, 0x61, 0x6c, 0x3a, 0x31, 0x32, 0x33, 0x34,
		0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa7,
		0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xc4,
		0x45, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65,
		0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x22, 0x44,
		0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x58, 0x5f,
		0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x43, 0x4f,
		0x4d, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
		0x74, 0x79, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
		0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65,
		0x77, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
		0x6c, 0x22, 0x20, 0x5d, 0x20, 0x7d}

	got, err := WrpDecode(in)
	if (nil != got) || (nil == err) {
		t.Error("Testing for invalid msg type 9 failed.")
	}
}

func TestTruncatedMsg(t *testing.T) {
	in := []byte{0x85, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
		0x70, 0x65, 0x09, 0xb0, 0x74, 0x72, 0x61, 0x6e,
		0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
		0x69, 0x64, 0xd9, 0x24, 0x39, 0x34, 0x34, 0x37,
		0x32, 0x34, 0x31, 0x63, 0x2d, 0x35, 0x32, 0x33,
		0x38, 0x2d, 0x34, 0x63, 0x62, 0x39, 0x2d, 0x39,
		0x62, 0x61, 0x61, 0x2d, 0x37, 0x30, 0x37, 0x36,
		0x65, 0x33, 0x32, 0x33, 0x32, 0x38, 0x39, 0x39,
		0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd9,
		0x26, 0x64, 0x6e, 0x73, 0x3a, 0x77, 0x65, 0x62,
		0x70, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x63, 0x61,
		0x6c, 0x22, 0x20, 0x5d, 0x20, 0x7d}

	got, err := WrpDecode(in)
	if (nil != got) || (nil == err) {
		t.Error("Testing for truncated message failed.")
	}
}
